/* automatically generated by rust-bindgen */

# [repr (C)] # [derive (Default)] pub struct __IncompleteArrayField < T > (:: std :: marker :: PhantomData < T > , [T ; 0]) ; impl < T > __IncompleteArrayField < T > { # [inline] pub const fn new () -> Self { __IncompleteArrayField (:: std :: marker :: PhantomData , []) } # [inline] pub fn as_ptr (& self) -> * const T { self as * const _ as * const T } # [inline] pub fn as_mut_ptr (& mut self) -> * mut T { self as * mut _ as * mut T } # [inline] pub unsafe fn as_slice (& self , len : usize) -> & [T] { :: std :: slice :: from_raw_parts (self . as_ptr () , len) } # [inline] pub unsafe fn as_mut_slice (& mut self , len : usize) -> & mut [T] { :: std :: slice :: from_raw_parts_mut (self . as_mut_ptr () , len) } } impl < T > :: std :: fmt :: Debug for __IncompleteArrayField < T > { fn fmt (& self , fmt : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { fmt . write_str ("__IncompleteArrayField") } } pub type size_t = :: std :: os :: raw :: c_uint ; # [repr (C)] # [derive (Copy , Clone)] pub struct list_head { pub next : * mut list_head , pub prev : * mut list_head , } # [test] fn bindgen_test_layout_list_head () { assert_eq ! (:: std :: mem :: size_of :: < list_head > () , 8usize , concat ! ("Size of: " , stringify ! (list_head))) ; assert_eq ! (:: std :: mem :: align_of :: < list_head > () , 4usize , concat ! ("Alignment of " , stringify ! (list_head))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < list_head > ())) . next as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (list_head) , "::" , stringify ! (next))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < list_head > ())) . prev as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (list_head) , "::" , stringify ! (prev))) ; } # [doc = " This element is a member of a avl-tree. It must be contained in all"] # [doc = " larger structs that should be put into a tree."] # [repr (C)] # [derive (Copy , Clone)] pub struct avl_node { # [doc = " Linked list node for supporting easy iteration and multiple"] # [doc = " elments with the same key."] # [doc = ""] # [doc = " this must be the first element of an avl_node to"] # [doc = " make casting for lists easier"] pub list : list_head , # [doc = " Pointer to parent node in tree, NULL if root node"] pub parent : * mut avl_node , # [doc = " Pointer to left child"] pub left : * mut avl_node , # [doc = " Pointer to right child"] pub right : * mut avl_node , # [doc = " pointer to key of node"] pub key : * const :: std :: os :: raw :: c_void , # [doc = " balance state of AVL tree (0,-1,+1)"] pub balance : :: std :: os :: raw :: c_schar , # [doc = " true if first of a series of nodes with same key"] pub leader : bool , } # [test] fn bindgen_test_layout_avl_node () { assert_eq ! (:: std :: mem :: size_of :: < avl_node > () , 28usize , concat ! ("Size of: " , stringify ! (avl_node))) ; assert_eq ! (:: std :: mem :: align_of :: < avl_node > () , 4usize , concat ! ("Alignment of " , stringify ! (avl_node))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . list as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (list))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . parent as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (parent))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . left as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (left))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . right as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (right))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . key as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (key))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . balance as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (balance))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_node > ())) . leader as * const _ as usize } , 25usize , concat ! ("Offset of field: " , stringify ! (avl_node) , "::" , stringify ! (leader))) ; } # [doc = " Prototype for avl comparators"] # [doc = " @param k1 first key"] # [doc = " @param k2 second key"] # [doc = " @param ptr custom data for tree comparator"] # [doc = " @return +1 if k1>k2, -1 if k1<k2, 0 if k1==k2"] pub type avl_tree_comp = :: std :: option :: Option < unsafe extern "C" fn (k1 : * const :: std :: os :: raw :: c_void , k2 : * const :: std :: os :: raw :: c_void , ptr : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int > ; # [doc = " This struct is the central management part of an avl tree."] # [doc = " One of them is necessary for each avl_tree."] # [repr (C)] # [derive (Copy , Clone)] pub struct avl_tree { # [doc = " Head of linked list node for supporting easy iteration"] # [doc = " and multiple elments with the same key."] pub list_head : list_head , # [doc = " pointer to the root node of the avl tree, NULL if tree is empty"] pub root : * mut avl_node , # [doc = " number of nodes in the avl tree"] pub count : :: std :: os :: raw :: c_uint , # [doc = " true if multiple nodes with the same key are"] # [doc = " allowed in the tree, false otherwise"] pub allow_dups : bool , # [doc = " pointer to the tree comparator"] # [doc = ""] # [doc = " First two parameters are keys to compare,"] # [doc = " third parameter is a copy of cmp_ptr"] pub comp : avl_tree_comp , # [doc = " custom pointer delivered to the tree comparator"] pub cmp_ptr : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_avl_tree () { assert_eq ! (:: std :: mem :: size_of :: < avl_tree > () , 28usize , concat ! ("Size of: " , stringify ! (avl_tree))) ; assert_eq ! (:: std :: mem :: align_of :: < avl_tree > () , 4usize , concat ! ("Alignment of " , stringify ! (avl_tree))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_tree > ())) . list_head as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (avl_tree) , "::" , stringify ! (list_head))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_tree > ())) . root as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (avl_tree) , "::" , stringify ! (root))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_tree > ())) . count as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (avl_tree) , "::" , stringify ! (count))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_tree > ())) . allow_dups as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (avl_tree) , "::" , stringify ! (allow_dups))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_tree > ())) . comp as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (avl_tree) , "::" , stringify ! (comp))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < avl_tree > ())) . cmp_ptr as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (avl_tree) , "::" , stringify ! (cmp_ptr))) ; } pub type va_list = __builtin_va_list ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __time_t = :: std :: os :: raw :: c_long ; pub type __suseconds_t = :: std :: os :: raw :: c_long ; # [repr (C)] # [derive (Copy , Clone)] pub struct timeval { pub tv_sec : __time_t , pub tv_usec : __suseconds_t , } # [test] fn bindgen_test_layout_timeval () { assert_eq ! (:: std :: mem :: size_of :: < timeval > () , 8usize , concat ! ("Size of: " , stringify ! (timeval))) ; assert_eq ! (:: std :: mem :: align_of :: < timeval > () , 4usize , concat ! ("Alignment of " , stringify ! (timeval))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < timeval > ())) . tv_sec as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (timeval) , "::" , stringify ! (tv_sec))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < timeval > ())) . tv_usec as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (timeval) , "::" , stringify ! (tv_usec))) ; } # [repr (C , packed)] pub struct blob_attr { pub id_len : u32 , pub data : __IncompleteArrayField < :: std :: os :: raw :: c_char > , } # [test] fn bindgen_test_layout_blob_attr () { assert_eq ! (:: std :: mem :: size_of :: < blob_attr > () , 4usize , concat ! ("Size of: " , stringify ! (blob_attr))) ; assert_eq ! (:: std :: mem :: align_of :: < blob_attr > () , 1usize , concat ! ("Alignment of " , stringify ! (blob_attr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_attr > ())) . id_len as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (blob_attr) , "::" , stringify ! (id_len))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_attr > ())) . data as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (blob_attr) , "::" , stringify ! (data))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct blob_attr_info { pub type_ : :: std :: os :: raw :: c_uint , pub minlen : :: std :: os :: raw :: c_uint , pub maxlen : :: std :: os :: raw :: c_uint , pub validate : :: std :: option :: Option < unsafe extern "C" fn (arg1 : * const blob_attr_info , arg2 : * mut blob_attr) -> bool > , } # [test] fn bindgen_test_layout_blob_attr_info () { assert_eq ! (:: std :: mem :: size_of :: < blob_attr_info > () , 16usize , concat ! ("Size of: " , stringify ! (blob_attr_info))) ; assert_eq ! (:: std :: mem :: align_of :: < blob_attr_info > () , 4usize , concat ! ("Alignment of " , stringify ! (blob_attr_info))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_attr_info > ())) . type_ as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (blob_attr_info) , "::" , stringify ! (type_))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_attr_info > ())) . minlen as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (blob_attr_info) , "::" , stringify ! (minlen))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_attr_info > ())) . maxlen as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (blob_attr_info) , "::" , stringify ! (maxlen))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_attr_info > ())) . validate as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (blob_attr_info) , "::" , stringify ! (validate))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct blob_buf { pub head : * mut blob_attr , pub grow : :: std :: option :: Option < unsafe extern "C" fn (buf : * mut blob_buf , minlen : :: std :: os :: raw :: c_int) -> bool > , pub buflen : :: std :: os :: raw :: c_int , pub buf : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_blob_buf () { assert_eq ! (:: std :: mem :: size_of :: < blob_buf > () , 16usize , concat ! ("Size of: " , stringify ! (blob_buf))) ; assert_eq ! (:: std :: mem :: align_of :: < blob_buf > () , 4usize , concat ! ("Alignment of " , stringify ! (blob_buf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_buf > ())) . head as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (blob_buf) , "::" , stringify ! (head))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_buf > ())) . grow as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (blob_buf) , "::" , stringify ! (grow))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_buf > ())) . buflen as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (blob_buf) , "::" , stringify ! (buflen))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blob_buf > ())) . buf as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (blob_buf) , "::" , stringify ! (buf))) ; } extern "C" { pub fn blob_fill_pad (attr : * mut blob_attr) ; } extern "C" { pub fn blob_set_raw_len (attr : * mut blob_attr , len : :: std :: os :: raw :: c_uint) ; } extern "C" { pub fn blob_attr_equal (a1 : * const blob_attr , a2 : * const blob_attr) -> bool ; } extern "C" { pub fn blob_buf_init (buf : * mut blob_buf , id : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blob_buf_free (buf : * mut blob_buf) ; } extern "C" { pub fn blob_buf_grow (buf : * mut blob_buf , required : :: std :: os :: raw :: c_int) -> bool ; } extern "C" { pub fn blob_new (buf : * mut blob_buf , id : :: std :: os :: raw :: c_int , payload : :: std :: os :: raw :: c_int) -> * mut blob_attr ; } extern "C" { pub fn blob_nest_start (buf : * mut blob_buf , id : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn blob_nest_end (buf : * mut blob_buf , cookie : * mut :: std :: os :: raw :: c_void) ; } extern "C" { pub fn blob_put (buf : * mut blob_buf , id : :: std :: os :: raw :: c_int , ptr : * const :: std :: os :: raw :: c_void , len : :: std :: os :: raw :: c_uint) -> * mut blob_attr ; } extern "C" { pub fn blob_check_type (ptr : * const :: std :: os :: raw :: c_void , len : :: std :: os :: raw :: c_uint , type_ : :: std :: os :: raw :: c_int) -> bool ; } extern "C" { pub fn blob_parse (attr : * mut blob_attr , data : * mut * mut blob_attr , info : * const blob_attr_info , max : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blob_parse_untrusted (attr : * mut blob_attr , attr_len : size_t , data : * mut * mut blob_attr , info : * const blob_attr_info , max : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blob_memdup (attr : * mut blob_attr) -> * mut blob_attr ; } extern "C" { pub fn blob_put_raw (buf : * mut blob_buf , ptr : * const :: std :: os :: raw :: c_void , len : :: std :: os :: raw :: c_uint) -> * mut blob_attr ; } pub const blobmsg_type_BLOBMSG_TYPE_UNSPEC : blobmsg_type = 0 ; pub const blobmsg_type_BLOBMSG_TYPE_ARRAY : blobmsg_type = 1 ; pub const blobmsg_type_BLOBMSG_TYPE_TABLE : blobmsg_type = 2 ; pub const blobmsg_type_BLOBMSG_TYPE_STRING : blobmsg_type = 3 ; pub const blobmsg_type_BLOBMSG_TYPE_INT64 : blobmsg_type = 4 ; pub const blobmsg_type_BLOBMSG_TYPE_INT32 : blobmsg_type = 5 ; pub const blobmsg_type_BLOBMSG_TYPE_INT16 : blobmsg_type = 6 ; pub const blobmsg_type_BLOBMSG_TYPE_INT8 : blobmsg_type = 7 ; pub const blobmsg_type_BLOBMSG_TYPE_DOUBLE : blobmsg_type = 8 ; pub const blobmsg_type___BLOBMSG_TYPE_LAST : blobmsg_type = 9 ; pub const blobmsg_type_BLOBMSG_TYPE_LAST : blobmsg_type = 8 ; pub const blobmsg_type_BLOBMSG_TYPE_BOOL : blobmsg_type = 7 ; pub type blobmsg_type = u32 ; # [repr (C , packed)] pub struct blobmsg_hdr { pub namelen : u16 , pub name : __IncompleteArrayField < u8 > , } # [test] fn bindgen_test_layout_blobmsg_hdr () { assert_eq ! (:: std :: mem :: size_of :: < blobmsg_hdr > () , 2usize , concat ! ("Size of: " , stringify ! (blobmsg_hdr))) ; assert_eq ! (:: std :: mem :: align_of :: < blobmsg_hdr > () , 1usize , concat ! ("Alignment of " , stringify ! (blobmsg_hdr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blobmsg_hdr > ())) . namelen as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (blobmsg_hdr) , "::" , stringify ! (namelen))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blobmsg_hdr > ())) . name as * const _ as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (blobmsg_hdr) , "::" , stringify ! (name))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct blobmsg_policy { pub name : * const :: std :: os :: raw :: c_char , pub type_ : blobmsg_type , } # [test] fn bindgen_test_layout_blobmsg_policy () { assert_eq ! (:: std :: mem :: size_of :: < blobmsg_policy > () , 8usize , concat ! ("Size of: " , stringify ! (blobmsg_policy))) ; assert_eq ! (:: std :: mem :: align_of :: < blobmsg_policy > () , 4usize , concat ! ("Alignment of " , stringify ! (blobmsg_policy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blobmsg_policy > ())) . name as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (blobmsg_policy) , "::" , stringify ! (name))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < blobmsg_policy > ())) . type_ as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (blobmsg_policy) , "::" , stringify ! (type_))) ; } extern "C" { pub fn blobmsg_check_attr (attr : * const blob_attr , name : bool) -> bool ; } extern "C" { pub fn blobmsg_check_attr_len (attr : * const blob_attr , name : bool , len : size_t) -> bool ; } extern "C" { pub fn blobmsg_check_attr_list (attr : * const blob_attr , type_ : :: std :: os :: raw :: c_int) -> bool ; } extern "C" { pub fn blobmsg_check_attr_list_len (attr : * const blob_attr , type_ : :: std :: os :: raw :: c_int , len : size_t) -> bool ; } extern "C" { pub fn blobmsg_check_array (attr : * const blob_attr , type_ : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blobmsg_check_array_len (attr : * const blob_attr , type_ : :: std :: os :: raw :: c_int , len : size_t) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blobmsg_parse (policy : * const blobmsg_policy , policy_len : :: std :: os :: raw :: c_int , tb : * mut * mut blob_attr , data : * mut :: std :: os :: raw :: c_void , len : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blobmsg_parse_array (policy : * const blobmsg_policy , policy_len : :: std :: os :: raw :: c_int , tb : * mut * mut blob_attr , data : * mut :: std :: os :: raw :: c_void , len : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blobmsg_add_field (buf : * mut blob_buf , type_ : :: std :: os :: raw :: c_int , name : * const :: std :: os :: raw :: c_char , data : * const :: std :: os :: raw :: c_void , len : :: std :: os :: raw :: c_uint) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blobmsg_open_nested (buf : * mut blob_buf , name : * const :: std :: os :: raw :: c_char , array : bool) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn blobmsg_alloc_string_buffer (buf : * mut blob_buf , name : * const :: std :: os :: raw :: c_char , maxlen : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn blobmsg_realloc_string_buffer (buf : * mut blob_buf , maxlen : :: std :: os :: raw :: c_uint) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn blobmsg_add_string_buffer (buf : * mut blob_buf) ; } extern "C" { pub fn blobmsg_vprintf (buf : * mut blob_buf , name : * const :: std :: os :: raw :: c_char , format : * const :: std :: os :: raw :: c_char , arg : va_list) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn blobmsg_printf (buf : * mut blob_buf , name : * const :: std :: os :: raw :: c_char , format : * const :: std :: os :: raw :: c_char , ...) -> :: std :: os :: raw :: c_int ; } pub type uloop_fd_handler = :: std :: option :: Option < unsafe extern "C" fn (u : * mut uloop_fd , events : :: std :: os :: raw :: c_uint) > ; pub type uloop_timeout_handler = :: std :: option :: Option < unsafe extern "C" fn (t : * mut uloop_timeout) > ; # [repr (C)] # [derive (Copy , Clone)] pub struct uloop_fd { pub cb : uloop_fd_handler , pub fd : :: std :: os :: raw :: c_int , pub eof : bool , pub error : bool , pub registered : bool , pub flags : u8 , } # [test] fn bindgen_test_layout_uloop_fd () { assert_eq ! (:: std :: mem :: size_of :: < uloop_fd > () , 12usize , concat ! ("Size of: " , stringify ! (uloop_fd))) ; assert_eq ! (:: std :: mem :: align_of :: < uloop_fd > () , 4usize , concat ! ("Alignment of " , stringify ! (uloop_fd))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_fd > ())) . cb as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (uloop_fd) , "::" , stringify ! (cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_fd > ())) . fd as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (uloop_fd) , "::" , stringify ! (fd))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_fd > ())) . eof as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (uloop_fd) , "::" , stringify ! (eof))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_fd > ())) . error as * const _ as usize } , 9usize , concat ! ("Offset of field: " , stringify ! (uloop_fd) , "::" , stringify ! (error))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_fd > ())) . registered as * const _ as usize } , 10usize , concat ! ("Offset of field: " , stringify ! (uloop_fd) , "::" , stringify ! (registered))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_fd > ())) . flags as * const _ as usize } , 11usize , concat ! ("Offset of field: " , stringify ! (uloop_fd) , "::" , stringify ! (flags))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct uloop_timeout { pub list : list_head , pub pending : bool , pub cb : uloop_timeout_handler , pub time : timeval , } # [test] fn bindgen_test_layout_uloop_timeout () { assert_eq ! (:: std :: mem :: size_of :: < uloop_timeout > () , 24usize , concat ! ("Size of: " , stringify ! (uloop_timeout))) ; assert_eq ! (:: std :: mem :: align_of :: < uloop_timeout > () , 4usize , concat ! ("Alignment of " , stringify ! (uloop_timeout))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_timeout > ())) . list as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (uloop_timeout) , "::" , stringify ! (list))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_timeout > ())) . pending as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (uloop_timeout) , "::" , stringify ! (pending))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_timeout > ())) . cb as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (uloop_timeout) , "::" , stringify ! (cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < uloop_timeout > ())) . time as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (uloop_timeout) , "::" , stringify ! (time))) ; } # [repr (C , packed (4))] # [derive (Copy , Clone)] pub struct ubus_msghdr { pub version : u8 , pub type_ : u8 , pub seq : u16 , pub peer : u32 , } # [test] fn bindgen_test_layout_ubus_msghdr () { assert_eq ! (:: std :: mem :: size_of :: < ubus_msghdr > () , 8usize , concat ! ("Size of: " , stringify ! (ubus_msghdr))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_msghdr > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_msghdr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_msghdr > ())) . version as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_msghdr) , "::" , stringify ! (version))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_msghdr > ())) . type_ as * const _ as usize } , 1usize , concat ! ("Offset of field: " , stringify ! (ubus_msghdr) , "::" , stringify ! (type_))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_msghdr > ())) . seq as * const _ as usize } , 2usize , concat ! ("Offset of field: " , stringify ! (ubus_msghdr) , "::" , stringify ! (seq))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_msghdr > ())) . peer as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (ubus_msghdr) , "::" , stringify ! (peer))) ; } pub const ubus_msg_type_UBUS_MSG_HELLO : ubus_msg_type = 0 ; pub const ubus_msg_type_UBUS_MSG_STATUS : ubus_msg_type = 1 ; pub const ubus_msg_type_UBUS_MSG_DATA : ubus_msg_type = 2 ; pub const ubus_msg_type_UBUS_MSG_PING : ubus_msg_type = 3 ; pub const ubus_msg_type_UBUS_MSG_LOOKUP : ubus_msg_type = 4 ; pub const ubus_msg_type_UBUS_MSG_INVOKE : ubus_msg_type = 5 ; pub const ubus_msg_type_UBUS_MSG_ADD_OBJECT : ubus_msg_type = 6 ; pub const ubus_msg_type_UBUS_MSG_REMOVE_OBJECT : ubus_msg_type = 7 ; pub const ubus_msg_type_UBUS_MSG_SUBSCRIBE : ubus_msg_type = 8 ; pub const ubus_msg_type_UBUS_MSG_UNSUBSCRIBE : ubus_msg_type = 9 ; pub const ubus_msg_type_UBUS_MSG_NOTIFY : ubus_msg_type = 10 ; pub const ubus_msg_type_UBUS_MSG_MONITOR : ubus_msg_type = 11 ; pub const ubus_msg_type___UBUS_MSG_LAST : ubus_msg_type = 12 ; pub type ubus_msg_type = u32 ; pub const ubus_msg_attr_UBUS_ATTR_UNSPEC : ubus_msg_attr = 0 ; pub const ubus_msg_attr_UBUS_ATTR_STATUS : ubus_msg_attr = 1 ; pub const ubus_msg_attr_UBUS_ATTR_OBJPATH : ubus_msg_attr = 2 ; pub const ubus_msg_attr_UBUS_ATTR_OBJID : ubus_msg_attr = 3 ; pub const ubus_msg_attr_UBUS_ATTR_METHOD : ubus_msg_attr = 4 ; pub const ubus_msg_attr_UBUS_ATTR_OBJTYPE : ubus_msg_attr = 5 ; pub const ubus_msg_attr_UBUS_ATTR_SIGNATURE : ubus_msg_attr = 6 ; pub const ubus_msg_attr_UBUS_ATTR_DATA : ubus_msg_attr = 7 ; pub const ubus_msg_attr_UBUS_ATTR_TARGET : ubus_msg_attr = 8 ; pub const ubus_msg_attr_UBUS_ATTR_ACTIVE : ubus_msg_attr = 9 ; pub const ubus_msg_attr_UBUS_ATTR_NO_REPLY : ubus_msg_attr = 10 ; pub const ubus_msg_attr_UBUS_ATTR_SUBSCRIBERS : ubus_msg_attr = 11 ; pub const ubus_msg_attr_UBUS_ATTR_USER : ubus_msg_attr = 12 ; pub const ubus_msg_attr_UBUS_ATTR_GROUP : ubus_msg_attr = 13 ; pub const ubus_msg_attr_UBUS_ATTR_MAX : ubus_msg_attr = 14 ; pub type ubus_msg_attr = u32 ; pub const ubus_monitor_attr_UBUS_MONITOR_CLIENT : ubus_monitor_attr = 0 ; pub const ubus_monitor_attr_UBUS_MONITOR_PEER : ubus_monitor_attr = 1 ; pub const ubus_monitor_attr_UBUS_MONITOR_SEND : ubus_monitor_attr = 2 ; pub const ubus_monitor_attr_UBUS_MONITOR_SEQ : ubus_monitor_attr = 3 ; pub const ubus_monitor_attr_UBUS_MONITOR_TYPE : ubus_monitor_attr = 4 ; pub const ubus_monitor_attr_UBUS_MONITOR_DATA : ubus_monitor_attr = 5 ; pub const ubus_monitor_attr_UBUS_MONITOR_MAX : ubus_monitor_attr = 6 ; pub type ubus_monitor_attr = u32 ; pub const ubus_msg_status_UBUS_STATUS_OK : ubus_msg_status = 0 ; pub const ubus_msg_status_UBUS_STATUS_INVALID_COMMAND : ubus_msg_status = 1 ; pub const ubus_msg_status_UBUS_STATUS_INVALID_ARGUMENT : ubus_msg_status = 2 ; pub const ubus_msg_status_UBUS_STATUS_METHOD_NOT_FOUND : ubus_msg_status = 3 ; pub const ubus_msg_status_UBUS_STATUS_NOT_FOUND : ubus_msg_status = 4 ; pub const ubus_msg_status_UBUS_STATUS_NO_DATA : ubus_msg_status = 5 ; pub const ubus_msg_status_UBUS_STATUS_PERMISSION_DENIED : ubus_msg_status = 6 ; pub const ubus_msg_status_UBUS_STATUS_TIMEOUT : ubus_msg_status = 7 ; pub const ubus_msg_status_UBUS_STATUS_NOT_SUPPORTED : ubus_msg_status = 8 ; pub const ubus_msg_status_UBUS_STATUS_UNKNOWN_ERROR : ubus_msg_status = 9 ; pub const ubus_msg_status_UBUS_STATUS_CONNECTION_FAILED : ubus_msg_status = 10 ; pub const ubus_msg_status___UBUS_STATUS_LAST : ubus_msg_status = 11 ; pub type ubus_msg_status = u32 ; # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_msg_src { _unused : [u8 ; 0] , } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_msghdr_buf { pub hdr : ubus_msghdr , pub data : * mut blob_attr , } # [test] fn bindgen_test_layout_ubus_msghdr_buf () { assert_eq ! (:: std :: mem :: size_of :: < ubus_msghdr_buf > () , 12usize , concat ! ("Size of: " , stringify ! (ubus_msghdr_buf))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_msghdr_buf > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_msghdr_buf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_msghdr_buf > ())) . hdr as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_msghdr_buf) , "::" , stringify ! (hdr))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_msghdr_buf > ())) . data as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_msghdr_buf) , "::" , stringify ! (data))) ; } pub type ubus_lookup_handler_t = :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context , obj : * mut ubus_object_data , priv_ : * mut :: std :: os :: raw :: c_void) > ; pub type ubus_handler_t = :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context , obj : * mut ubus_object , req : * mut ubus_request_data , method : * const :: std :: os :: raw :: c_char , msg : * mut blob_attr) -> :: std :: os :: raw :: c_int > ; pub type ubus_state_handler_t = :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context , obj : * mut ubus_object) > ; pub type ubus_remove_handler_t = :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context , obj : * mut ubus_subscriber , id : u32) > ; pub type ubus_event_handler_t = :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context , ev : * mut ubus_event_handler , type_ : * const :: std :: os :: raw :: c_char , msg : * mut blob_attr) > ; pub type ubus_data_handler_t = :: std :: option :: Option < unsafe extern "C" fn (req : * mut ubus_request , type_ : :: std :: os :: raw :: c_int , msg : * mut blob_attr) > ; pub type ubus_fd_handler_t = :: std :: option :: Option < unsafe extern "C" fn (req : * mut ubus_request , fd : :: std :: os :: raw :: c_int) > ; pub type ubus_complete_handler_t = :: std :: option :: Option < unsafe extern "C" fn (req : * mut ubus_request , ret : :: std :: os :: raw :: c_int) > ; pub type ubus_notify_complete_handler_t = :: std :: option :: Option < unsafe extern "C" fn (req : * mut ubus_notify_request , idx : :: std :: os :: raw :: c_int , ret : :: std :: os :: raw :: c_int) > ; pub type ubus_notify_data_handler_t = :: std :: option :: Option < unsafe extern "C" fn (req : * mut ubus_notify_request , type_ : :: std :: os :: raw :: c_int , msg : * mut blob_attr) > ; pub type ubus_connect_handler_t = :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context) > ; # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_method { pub name : * const :: std :: os :: raw :: c_char , pub handler : ubus_handler_t , pub mask : :: std :: os :: raw :: c_ulong , pub tags : :: std :: os :: raw :: c_ulong , pub policy : * const blobmsg_policy , pub n_policy : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_ubus_method () { assert_eq ! (:: std :: mem :: size_of :: < ubus_method > () , 24usize , concat ! ("Size of: " , stringify ! (ubus_method))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_method > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_method))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_method > ())) . name as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_method) , "::" , stringify ! (name))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_method > ())) . handler as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (ubus_method) , "::" , stringify ! (handler))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_method > ())) . mask as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_method) , "::" , stringify ! (mask))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_method > ())) . tags as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (ubus_method) , "::" , stringify ! (tags))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_method > ())) . policy as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (ubus_method) , "::" , stringify ! (policy))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_method > ())) . n_policy as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (ubus_method) , "::" , stringify ! (n_policy))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_object_type { pub name : * const :: std :: os :: raw :: c_char , pub id : u32 , pub methods : * const ubus_method , pub n_methods : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_ubus_object_type () { assert_eq ! (:: std :: mem :: size_of :: < ubus_object_type > () , 16usize , concat ! ("Size of: " , stringify ! (ubus_object_type))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_object_type > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_object_type))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_type > ())) . name as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_object_type) , "::" , stringify ! (name))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_type > ())) . id as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (ubus_object_type) , "::" , stringify ! (id))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_type > ())) . methods as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_object_type) , "::" , stringify ! (methods))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_type > ())) . n_methods as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (ubus_object_type) , "::" , stringify ! (n_methods))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_object { pub avl : avl_node , pub name : * const :: std :: os :: raw :: c_char , pub id : u32 , pub path : * const :: std :: os :: raw :: c_char , pub type_ : * mut ubus_object_type , pub subscribe_cb : ubus_state_handler_t , pub has_subscribers : bool , pub methods : * const ubus_method , pub n_methods : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_ubus_object () { assert_eq ! (:: std :: mem :: size_of :: < ubus_object > () , 60usize , concat ! ("Size of: " , stringify ! (ubus_object))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_object > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_object))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . avl as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (avl))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . name as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (name))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . id as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (id))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . path as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (path))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . type_ as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (type_))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . subscribe_cb as * const _ as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (subscribe_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . has_subscribers as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (has_subscribers))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . methods as * const _ as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (methods))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object > ())) . n_methods as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (ubus_object) , "::" , stringify ! (n_methods))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_subscriber { pub obj : ubus_object , pub cb : ubus_handler_t , pub remove_cb : ubus_remove_handler_t , } # [test] fn bindgen_test_layout_ubus_subscriber () { assert_eq ! (:: std :: mem :: size_of :: < ubus_subscriber > () , 68usize , concat ! ("Size of: " , stringify ! (ubus_subscriber))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_subscriber > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_subscriber))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_subscriber > ())) . obj as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_subscriber) , "::" , stringify ! (obj))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_subscriber > ())) . cb as * const _ as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (ubus_subscriber) , "::" , stringify ! (cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_subscriber > ())) . remove_cb as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (ubus_subscriber) , "::" , stringify ! (remove_cb))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_event_handler { pub obj : ubus_object , pub cb : ubus_event_handler_t , } # [test] fn bindgen_test_layout_ubus_event_handler () { assert_eq ! (:: std :: mem :: size_of :: < ubus_event_handler > () , 64usize , concat ! ("Size of: " , stringify ! (ubus_event_handler))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_event_handler > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_event_handler))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_event_handler > ())) . obj as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_event_handler) , "::" , stringify ! (obj))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_event_handler > ())) . cb as * const _ as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (ubus_event_handler) , "::" , stringify ! (cb))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_context { pub requests : list_head , pub objects : avl_tree , pub pending : list_head , pub sock : uloop_fd , pub pending_timer : uloop_timeout , pub local_id : u32 , pub request_seq : u16 , pub cancel_poll : bool , pub stack_depth : :: std :: os :: raw :: c_int , pub connection_lost : :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context) > , pub monitor_cb : :: std :: option :: Option < unsafe extern "C" fn (ctx : * mut ubus_context , seq : u32 , data : * mut blob_attr) > , pub msgbuf : ubus_msghdr_buf , pub msgbuf_data_len : u32 , pub msgbuf_reduction_counter : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_ubus_context () { assert_eq ! (:: std :: mem :: size_of :: < ubus_context > () , 120usize , concat ! ("Size of: " , stringify ! (ubus_context))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_context > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_context))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . requests as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (requests))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . objects as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (objects))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . pending as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (pending))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . sock as * const _ as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (sock))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . pending_timer as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (pending_timer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . local_id as * const _ as usize } , 80usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (local_id))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . request_seq as * const _ as usize } , 84usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (request_seq))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . cancel_poll as * const _ as usize } , 86usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (cancel_poll))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . stack_depth as * const _ as usize } , 88usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (stack_depth))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . connection_lost as * const _ as usize } , 92usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (connection_lost))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . monitor_cb as * const _ as usize } , 96usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (monitor_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . msgbuf as * const _ as usize } , 100usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (msgbuf))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . msgbuf_data_len as * const _ as usize } , 112usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (msgbuf_data_len))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_context > ())) . msgbuf_reduction_counter as * const _ as usize } , 116usize , concat ! ("Offset of field: " , stringify ! (ubus_context) , "::" , stringify ! (msgbuf_reduction_counter))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_object_data { pub id : u32 , pub type_id : u32 , pub path : * const :: std :: os :: raw :: c_char , pub signature : * mut blob_attr , } # [test] fn bindgen_test_layout_ubus_object_data () { assert_eq ! (:: std :: mem :: size_of :: < ubus_object_data > () , 16usize , concat ! ("Size of: " , stringify ! (ubus_object_data))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_object_data > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_object_data))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_data > ())) . id as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_object_data) , "::" , stringify ! (id))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_data > ())) . type_id as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (ubus_object_data) , "::" , stringify ! (type_id))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_data > ())) . path as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_object_data) , "::" , stringify ! (path))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_object_data > ())) . signature as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (ubus_object_data) , "::" , stringify ! (signature))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_acl_key { pub user : * const :: std :: os :: raw :: c_char , pub group : * const :: std :: os :: raw :: c_char , pub object : * const :: std :: os :: raw :: c_char , } # [test] fn bindgen_test_layout_ubus_acl_key () { assert_eq ! (:: std :: mem :: size_of :: < ubus_acl_key > () , 12usize , concat ! ("Size of: " , stringify ! (ubus_acl_key))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_acl_key > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_acl_key))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_acl_key > ())) . user as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_acl_key) , "::" , stringify ! (user))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_acl_key > ())) . group as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (ubus_acl_key) , "::" , stringify ! (group))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_acl_key > ())) . object as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_acl_key) , "::" , stringify ! (object))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_request_data { pub object : u32 , pub peer : u32 , pub seq : u16 , pub acl : ubus_acl_key , pub deferred : bool , pub fd : :: std :: os :: raw :: c_int , pub req_fd : :: std :: os :: raw :: c_int , } # [test] fn bindgen_test_layout_ubus_request_data () { assert_eq ! (:: std :: mem :: size_of :: < ubus_request_data > () , 36usize , concat ! ("Size of: " , stringify ! (ubus_request_data))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_request_data > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_request_data))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . object as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (object))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . peer as * const _ as usize } , 4usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (peer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . seq as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (seq))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . acl as * const _ as usize } , 12usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (acl))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . deferred as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (deferred))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . fd as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (fd))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request_data > ())) . req_fd as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (ubus_request_data) , "::" , stringify ! (req_fd))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_request { pub list : list_head , pub pending : list_head , pub status_code : :: std :: os :: raw :: c_int , pub status_msg : bool , pub blocked : bool , pub cancelled : bool , pub notify : bool , pub peer : u32 , pub seq : u16 , pub raw_data_cb : ubus_data_handler_t , pub data_cb : ubus_data_handler_t , pub fd_cb : ubus_fd_handler_t , pub complete_cb : ubus_complete_handler_t , pub fd : :: std :: os :: raw :: c_int , pub ctx : * mut ubus_context , pub priv_ : * mut :: std :: os :: raw :: c_void , } # [test] fn bindgen_test_layout_ubus_request () { assert_eq ! (:: std :: mem :: size_of :: < ubus_request > () , 60usize , concat ! ("Size of: " , stringify ! (ubus_request))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_request > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_request))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . list as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (list))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . pending as * const _ as usize } , 8usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (pending))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . status_code as * const _ as usize } , 16usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (status_code))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . status_msg as * const _ as usize } , 20usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (status_msg))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . blocked as * const _ as usize } , 21usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (blocked))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . cancelled as * const _ as usize } , 22usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (cancelled))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . notify as * const _ as usize } , 23usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (notify))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . peer as * const _ as usize } , 24usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (peer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . seq as * const _ as usize } , 28usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (seq))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . raw_data_cb as * const _ as usize } , 32usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (raw_data_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . data_cb as * const _ as usize } , 36usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (data_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . fd_cb as * const _ as usize } , 40usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (fd_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . complete_cb as * const _ as usize } , 44usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (complete_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . fd as * const _ as usize } , 48usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (fd))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . ctx as * const _ as usize } , 52usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (ctx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_request > ())) . priv_ as * const _ as usize } , 56usize , concat ! ("Offset of field: " , stringify ! (ubus_request) , "::" , stringify ! (priv_))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_notify_request { pub req : ubus_request , pub status_cb : ubus_notify_complete_handler_t , pub complete_cb : ubus_notify_complete_handler_t , pub data_cb : ubus_notify_data_handler_t , pub pending : u32 , pub id : [u32 ; 17usize] , } # [test] fn bindgen_test_layout_ubus_notify_request () { assert_eq ! (:: std :: mem :: size_of :: < ubus_notify_request > () , 144usize , concat ! ("Size of: " , stringify ! (ubus_notify_request))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_notify_request > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_notify_request))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_notify_request > ())) . req as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_notify_request) , "::" , stringify ! (req))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_notify_request > ())) . status_cb as * const _ as usize } , 60usize , concat ! ("Offset of field: " , stringify ! (ubus_notify_request) , "::" , stringify ! (status_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_notify_request > ())) . complete_cb as * const _ as usize } , 64usize , concat ! ("Offset of field: " , stringify ! (ubus_notify_request) , "::" , stringify ! (complete_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_notify_request > ())) . data_cb as * const _ as usize } , 68usize , concat ! ("Offset of field: " , stringify ! (ubus_notify_request) , "::" , stringify ! (data_cb))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_notify_request > ())) . pending as * const _ as usize } , 72usize , concat ! ("Offset of field: " , stringify ! (ubus_notify_request) , "::" , stringify ! (pending))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_notify_request > ())) . id as * const _ as usize } , 76usize , concat ! ("Offset of field: " , stringify ! (ubus_notify_request) , "::" , stringify ! (id))) ; } # [repr (C)] # [derive (Copy , Clone)] pub struct ubus_auto_conn { pub ctx : ubus_context , pub timer : uloop_timeout , pub path : * const :: std :: os :: raw :: c_char , pub cb : ubus_connect_handler_t , } # [test] fn bindgen_test_layout_ubus_auto_conn () { assert_eq ! (:: std :: mem :: size_of :: < ubus_auto_conn > () , 152usize , concat ! ("Size of: " , stringify ! (ubus_auto_conn))) ; assert_eq ! (:: std :: mem :: align_of :: < ubus_auto_conn > () , 4usize , concat ! ("Alignment of " , stringify ! (ubus_auto_conn))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_auto_conn > ())) . ctx as * const _ as usize } , 0usize , concat ! ("Offset of field: " , stringify ! (ubus_auto_conn) , "::" , stringify ! (ctx))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_auto_conn > ())) . timer as * const _ as usize } , 120usize , concat ! ("Offset of field: " , stringify ! (ubus_auto_conn) , "::" , stringify ! (timer))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_auto_conn > ())) . path as * const _ as usize } , 144usize , concat ! ("Offset of field: " , stringify ! (ubus_auto_conn) , "::" , stringify ! (path))) ; assert_eq ! (unsafe { & (* (:: std :: ptr :: null :: < ubus_auto_conn > ())) . cb as * const _ as usize } , 148usize , concat ! ("Offset of field: " , stringify ! (ubus_auto_conn) , "::" , stringify ! (cb))) ; } extern "C" { pub fn ubus_connect (path : * const :: std :: os :: raw :: c_char) -> * mut ubus_context ; } extern "C" { pub fn ubus_connect_ctx (ctx : * mut ubus_context , path : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_auto_connect (conn : * mut ubus_auto_conn) ; } extern "C" { pub fn ubus_reconnect (ctx : * mut ubus_context , path : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_free (ctx : * mut ubus_context) ; } extern "C" { pub fn ubus_shutdown (ctx : * mut ubus_context) ; } extern "C" { pub fn ubus_strerror (error : :: std :: os :: raw :: c_int) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn ubus_complete_request (ctx : * mut ubus_context , req : * mut ubus_request , timeout : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_complete_request_async (ctx : * mut ubus_context , req : * mut ubus_request) ; } extern "C" { pub fn ubus_abort_request (ctx : * mut ubus_context , req : * mut ubus_request) ; } extern "C" { pub fn ubus_lookup (ctx : * mut ubus_context , path : * const :: std :: os :: raw :: c_char , cb : ubus_lookup_handler_t , priv_ : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_lookup_id (ctx : * mut ubus_context , path : * const :: std :: os :: raw :: c_char , id : * mut u32) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_add_object (ctx : * mut ubus_context , obj : * mut ubus_object) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_remove_object (ctx : * mut ubus_context , obj : * mut ubus_object) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_register_subscriber (ctx : * mut ubus_context , obj : * mut ubus_subscriber) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_subscribe (ctx : * mut ubus_context , obj : * mut ubus_subscriber , id : u32) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_unsubscribe (ctx : * mut ubus_context , obj : * mut ubus_subscriber , id : u32) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_register_acl (ctx : * mut ubus_context) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_invoke_fd (ctx : * mut ubus_context , obj : u32 , method : * const :: std :: os :: raw :: c_char , msg : * mut blob_attr , cb : ubus_data_handler_t , priv_ : * mut :: std :: os :: raw :: c_void , timeout : :: std :: os :: raw :: c_int , fd : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_invoke_async_fd (ctx : * mut ubus_context , obj : u32 , method : * const :: std :: os :: raw :: c_char , msg : * mut blob_attr , req : * mut ubus_request , fd : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_send_reply (ctx : * mut ubus_context , req : * mut ubus_request_data , msg : * mut blob_attr) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_complete_deferred_request (ctx : * mut ubus_context , req : * mut ubus_request_data , ret : :: std :: os :: raw :: c_int) ; } extern "C" { pub fn ubus_notify (ctx : * mut ubus_context , obj : * mut ubus_object , type_ : * const :: std :: os :: raw :: c_char , msg : * mut blob_attr , timeout : :: std :: os :: raw :: c_int) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_notify_async (ctx : * mut ubus_context , obj : * mut ubus_object , type_ : * const :: std :: os :: raw :: c_char , msg : * mut blob_attr , req : * mut ubus_notify_request) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_send_event (ctx : * mut ubus_context , id : * const :: std :: os :: raw :: c_char , data : * mut blob_attr) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ubus_register_event_handler (ctx : * mut ubus_context , ev : * mut ubus_event_handler , pattern : * const :: std :: os :: raw :: c_char) -> :: std :: os :: raw :: c_int ; } # [repr (C)] # [derive (Copy , Clone)] pub struct json_object { _unused : [u8 ; 0] , } extern "C" { pub fn blobmsg_add_object (b : * mut blob_buf , obj : * mut json_object) -> bool ; } extern "C" { pub fn blobmsg_add_json_element (b : * mut blob_buf , name : * const :: std :: os :: raw :: c_char , obj : * mut json_object) -> bool ; } extern "C" { pub fn blobmsg_add_json_from_string (b : * mut blob_buf , str : * const :: std :: os :: raw :: c_char) -> bool ; } extern "C" { pub fn blobmsg_add_json_from_file (b : * mut blob_buf , file : * const :: std :: os :: raw :: c_char) -> bool ; } pub type blobmsg_json_format_t = :: std :: option :: Option < unsafe extern "C" fn (priv_ : * mut :: std :: os :: raw :: c_void , attr : * mut blob_attr) -> * const :: std :: os :: raw :: c_char > ; extern "C" { pub fn blobmsg_format_json_with_cb (attr : * mut blob_attr , list : bool , cb : blobmsg_json_format_t , priv_ : * mut :: std :: os :: raw :: c_void , indent : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn blobmsg_format_json_value_with_cb (attr : * mut blob_attr , cb : blobmsg_json_format_t , priv_ : * mut :: std :: os :: raw :: c_void , indent : :: std :: os :: raw :: c_int) -> * mut :: std :: os :: raw :: c_char ; } pub type __builtin_va_list = * mut :: std :: os :: raw :: c_void ;